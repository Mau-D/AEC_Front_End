{"version":3,"sources":["images/netflix.png","images/michaeljordan.jpg","images/kerr.jpg","images/wennington.jpg","images/pippen.jpg","images/rodman.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","nbrAleatoire","Math","floor","random","joueurs","photosJoueurs","photoSteveKerr","photoMichaelJordan","photoBillWennington","photoScottiePipen","photoDennisRodman","imageJoueurAffiche","id","src","alt","height","width","nomJoueurAffiche","listJoueurs","map","nom","i","key","listJoueurs2","ChangerJoueur","document","getElementById","style","display","imgJoueur","nomJoueur","imgJ","nomJ","setAttribute","innerHTML","App","netflixlogo","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,+PCSvCC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,IAErDE,EAAU,CAAC,aAAc,iBAAkB,kBAAmB,gBAAiB,iBAE/EC,EAAc,CAACC,IAAgBC,IAAoBC,IAAqBC,IAAmBC,KAG3FC,EACF,yBACAC,GAAI,cACJC,IAAMR,EAAcL,GACpBc,IAAMV,EAAQJ,GACde,OAPe,QAQfC,MARe,UAWbC,EAAmBb,EAAQJ,GAE3BkB,EAAcd,EAAQe,KAAI,SAACC,EAAKC,GAAN,OAAU,wBAAIC,IAAK,UAAUD,GAAID,MAG3DG,EACF,6BACoB,IAAjBvB,GAAsB,4BAAI,8CAAuB,+CAAwB,6CAAsB,8CAC9E,IAAjBA,GAAsB,4BAAI,0CAAmB,+CAAwB,6CAAsB,8CAC1E,IAAjBA,GAAsB,4BAAI,0CAAmB,8CAAuB,6CAAsB,8CACzE,IAAjBA,GAAsB,4BAAI,0CAAmB,8CAAuB,+CAAwB,8CAC3E,IAAjBA,GAAsB,4BAAI,0CAAmB,8CAAuB,+CAAwB,+CAKjG,SAASwB,IAETC,SAASC,eAAe,gBAAgBC,MAAMC,QAAQ,OACtDH,SAASC,eAAe,gBAAgBC,MAAMC,QAAQ,OACtD,IACIC,EACAC,EAFA9B,EAAeC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,IAGpC,IAAjBF,GACF6B,EAAYxB,EAAc,GAC1ByB,EAAY1B,EAAQ,IAEI,IAAjBJ,GACP6B,EAAYxB,EAAc,GAC1ByB,EAAY1B,EAAQ,IAEI,IAAjBJ,GACP6B,EAAYxB,EAAc,GAC1ByB,EAAY1B,EAAQ,IAEI,IAAjBJ,GACP6B,EAAYxB,EAAc,GAC1ByB,EAAY1B,EAAQ,KAGpByB,EAAYxB,EAAc,GAC1ByB,EAAY1B,EAAQ,IAEtB,IAAI2B,EAAON,SAASC,eAAe,eAC/BM,EAAOP,SAASC,eAAe,cACnCK,EAAKE,aAAa,MAAOJ,GACzBG,EAAKE,UAAYJ,EAyBFK,MArBf,WAgBE,OAdE,6BACE,8CACA,gDACA,yBAAKtB,IAAKuB,IAAatB,IAAI,YAC3B,iDACA,wBAAIF,GAAG,cAAcK,GACpBN,EACD,qEACA,4BAAKO,GACL,wBAAIN,GAAG,gBAAP,sCACA,wBAAIA,GAAG,gBAAgBW,GACvB,4BAAQc,KAAK,SAASC,QAASd,GAA/B,uBC5Ece,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af57dbe8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/netflix.b78b79b5.png\";","module.exports = __webpack_public_path__ + \"static/media/michaeljordan.7fd507f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kerr.bd91da16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wennington.be0c2ac0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pippen.2c68f8f5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rodman.af1aba23.jpg\";","import React from 'react';\nimport './App.css';\nimport netflixlogo from './images/netflix.png';\nimport photoMichaelJordan from './images/michaeljordan.jpg';\nimport photoSteveKerr from './images/kerr.jpg';\nimport photoBillWennington from './images/wennington.jpg';\nimport photoScottiePipen from './images/pippen.jpg';\nimport photoDennisRodman from './images/rodman.jpg';\n//Générer un nombre aléatoire de 0 à 4\nlet nbrAleatoire = Math.floor(Math.random() * Math.floor(5)); \n//Créer un tableau avec tous les joueurs\nlet joueurs = ['Steve Kerr', 'Michael Jordan', 'Bill Wennington', 'Scottie Pipen', 'Dennis Rodman'];\n//Créer un tableau avec les images des joueurs correspondants\nlet photosJoueurs=[photoSteveKerr, photoMichaelJordan, photoBillWennington, photoScottiePipen, photoDennisRodman];\nconst longueur = \"200px\";\n//Variable de l'image du joueur choisi par le nombre aléatoire\nlet imageJoueurAffiche = (\n  <img\n  id= 'photoJoueur'\n  src= {photosJoueurs[nbrAleatoire]}\n  alt= {joueurs[nbrAleatoire]}\n  height={longueur}\n  width={longueur}/>\n);\n//Variable du nom du joueur choisi par le nombre aléatoire\nlet nomJoueurAffiche = joueurs[nbrAleatoire];\n//création de la liste 1, avec tous les joueurs\nlet listJoueurs = joueurs.map((nom, i)=><li key={'joueurs'+i}>{nom}</li>);\n//Création de la liste 2, sans le joueur affiché par le nombre aléatoire\n//Pour la liste 2, pas besoin{} pour les conditions, car je ne suis pas dans un objet JSX\nlet listJoueurs2 =(\n  <div>\n    {nbrAleatoire === 0 && <ul><li>Michael Jordan</li><li>Bill Wennington</li><li>Scottie Pipen</li><li>Dennis Rodman</li></ul>}\n    {nbrAleatoire === 1 && <ul><li>Steve Kerr</li><li>Bill Wennington</li><li>Scottie Pipen</li><li>Dennis Rodman</li></ul>}\n    {nbrAleatoire === 2 && <ul><li>Steve Kerr</li><li>Michael Jordan</li><li>Scottie Pipen</li><li>Dennis Rodman</li></ul>}\n    {nbrAleatoire === 3 && <ul><li>Steve Kerr</li><li>Michael Jordan</li><li>Bill Wennington</li><li>Dennis Rodman</li></ul>}\n    {nbrAleatoire === 4 && <ul><li>Steve Kerr</li><li>Michael Jordan</li><li>Bill Wennington</li><li>Scottie Pipen</li></ul>}\n  </div>\n );\n\n//fonction pour changer de joueur\nfunction ChangerJoueur(){\n//Effacer la liste 2 et son titre\ndocument.getElementById('listeACacher').style.display=\"none\";\ndocument.getElementById('titreACacher').style.display=\"none\";\nlet nbrAleatoire = Math.floor(Math.random() * Math.floor(5)); \nlet imgJoueur;\nlet nomJoueur;\nif (nbrAleatoire === 0){\n  imgJoueur = photosJoueurs[0];\n  nomJoueur = joueurs[0];\n}\nelse if (nbrAleatoire === 1){\n  imgJoueur = photosJoueurs[1];\n  nomJoueur = joueurs[1];\n}\nelse if (nbrAleatoire === 2){\n  imgJoueur = photosJoueurs[2];\n  nomJoueur = joueurs[2];\n}\nelse if (nbrAleatoire === 3){\n  imgJoueur = photosJoueurs[3];\n  nomJoueur = joueurs[3];\n}\nelse {\n  imgJoueur = photosJoueurs[4];\n  nomJoueur = joueurs[4];\n}\nlet imgJ = document.getElementById(\"photoJoueur\");\nlet nomJ = document.getElementById(\"nomAffiche\");\nimgJ.setAttribute(\"src\", imgJoueur);\nnomJ.innerHTML = nomJoueur;\n};\n\n//Événement, lors du clic, pour changer de joueur, voir <button>\nfunction App() {\n  const texteAfficher=(\n    <div>\n      <h1>THE LAST DANCE</h1>\n      <p>Une production de</p>\n      <img src={netflixlogo} alt='Netflix'/>\n      <p>Mettant en vedette</p>\n      <h2 id='nomAffiche'>{nomJoueurAffiche}</h2>\n      {imageJoueurAffiche}\n      <h3>Les 5 partants affichés avec MAP()</h3>\n      <ul>{listJoueurs}</ul>\n      <h3 id=\"titreACacher\">Les 4 partants affichés avec &&</h3>\n      <ul id=\"listeACacher\">{listJoueurs2}</ul>\n      <button type=\"button\" onClick={ChangerJoueur}>Changer de joueur</button> \n    </div>\n  );\n  return (\n      texteAfficher  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}