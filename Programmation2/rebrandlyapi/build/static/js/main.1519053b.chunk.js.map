{"version":3,"sources":["components/Post.js","components/App.js","serviceWorker.js","index.js"],"names":["Post","props","state","shortURL","getData","bind","valeurLongURL","document","getElementById","value","fetch","method","headers","apikey","body","JSON","stringify","destination","response","ok","json","jsonResponse","console","log","this","setState","shortUrl","Error","Container","Row","className","Col","xs","sm","span","offset","Form","Control","type","placeholder","id","Button","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0VAQaA,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,SAAU,IACzB,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAHE,EADrB,iLAQUC,EAAgBC,SAASC,eAAe,WAAWC,MAC1C,mCATnB,kBAW6BC,MAAM,qCAAsC,CACjEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,mBAAoBC,OAJpC,oCAKXC,KAAMC,KAAKC,UAAU,CAAEC,YAAaX,MAd5C,YAWYY,EAXZ,QAgBmBC,GAhBnB,iCAiBmCD,EAASE,OAjB5C,cAiBcC,EAjBd,OAkBQC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CAAEtB,SAAUkB,EAAaK,WAnB/C,kBAoBeL,GApBf,cAsBY,IAAIM,MAAM,mBAtBtB,kCAwBML,QAAQC,IAAR,MAxBN,+IA6BI,OACE,oCACE,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,0CAGJ,kBAACH,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAKE,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKL,UAAU,mBACzC,6CAGJ,kBAACD,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAKE,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKL,UAAU,cACzC,kBAACM,EAAA,EAAD,CAAMN,UAAU,QACd,kBAACM,EAAA,EAAKC,QAAN,CACEP,UAAU,2CACVQ,KAAK,OACLC,YAAY,0BACZC,GAAG,eAKX,kBAACX,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAKE,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKL,UAAU,mBACzC,kBAACW,EAAA,EAAD,CACEX,UAAU,qCACVY,QAASlB,KAAKpB,SAFhB,cASN,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,CAAKE,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKL,UAAU,oBACzC,yBAAKA,UAAU,sCACb,qDACA,2BAAIN,KAAKtB,MAAMC,mBAtE/B,GAA0BwC,IAAMC,WCAjBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAASC,eAAe,SDwHpB,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.1519053b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport \"./App.css\";\r\n\r\nexport class Post extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { shortURL: \"\" };\r\n    this.getData = this.getData.bind(this);\r\n  }\r\n\r\n  async getData() {\r\n    const valeurLongURL = document.getElementById(\"longURL\").value;\r\n    const apiKey = \"69d2094e1a064a51b971277d17bdde5c\";\r\n    try {\r\n      const response = await fetch(\"https://api.rebrandly.com/v1/links\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\", apikey: apiKey },\r\n        body: JSON.stringify({ destination: valeurLongURL }),\r\n      });\r\n      if (response.ok) {\r\n        const jsonResponse = await response.json();\r\n        console.log(jsonResponse);\r\n        this.setState({ shortURL: jsonResponse.shortUrl });\r\n        return jsonResponse;\r\n      }\r\n      throw new Error(\"Request failed!\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row className=\"text-center\">\r\n            <Col xs={12}>\r\n              <h1>bytesize</h1>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col sm={{ span: 6, offset: 3 }} className=\"bg-primary py-5\">\r\n              <h2>Enter a URL</h2>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col sm={{ span: 6, offset: 3 }} className=\"bg-primary\">\r\n              <Form className=\"pb-5\">\r\n                <Form.Control\r\n                  className=\"border border-dark bg-primary text-white\"\r\n                  type=\"text\"\r\n                  placeholder=\"https://www.google.com/\"\r\n                  id=\"longURL\"\r\n                />\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"text-center\">\r\n            <Col sm={{ span: 6, offset: 3 }} className=\"pb-5 bg-primary\">\r\n              <Button\r\n                className=\"btn-primary border border-dark p-3\"\r\n                onClick={this.getData}\r\n              >\r\n                Shorten\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Container>\r\n          <Row className=\"text-center\">\r\n            <Col sm={{ span: 6, offset: 3 }} className=\"py-5  bg-primary\">\r\n              <div className=\"p-5 border border-white text-light\">\r\n                <p>Your shortened url is:</p>\r\n                <p>{this.state.shortURL}</p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Post } from \"./Post\";\n\nfunction App() {\n  return <Post />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}