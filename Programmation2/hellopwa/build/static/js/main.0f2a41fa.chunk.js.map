{"version":3,"sources":["logo.svg","Components/BoutonInstallPWA.js","localDB/DemoJSONLocal.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","BoutonInstallPWA","Button","variant","size","block","id","console","log","DemoJSONLocal","json","require","readMoto","moto","modele","adventuremotorcycles","forEach","push","fabricant","picture","specifications","description","prix","i","length","j","splice","test","App","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0f2a41fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction BoutonInstallPWA() {\r\n  return (\r\n    <Button variant=\"primary\" size=\"lg\" block id=\"boutonInstall\">\r\n      Installer l'application\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default BoutonInstallPWA;\r\n","import React from \"react\";\r\nconsole.log(\"DemoJSONLocal\");\r\n\r\nfunction DemoJSONLocal() {\r\n  test();\r\n\r\n  return <h1>Liste des motos adventures</h1>;\r\n}\r\n\r\nfunction test() {\r\n  //OUVERTURE DE LA BD\r\n\r\n  let json = require(\"./db.json\");\r\n\r\n  console.log(\"AFFICHER\");\r\n\r\n  //READ, on pourrait aussi prendre un for traditionnel comme en bas\r\n\r\n  json.adventuremotorcycles.forEach(readMoto);\r\n  //fonction readMoto\r\n  function readMoto(moto) {\r\n    console.log(moto.modele);\r\n  }\r\n\r\n  //AJOUT\r\n\r\n  json.adventuremotorcycles.push({\r\n    id: 11,\r\n    modele: \"DUKE\",\r\n    fabricant: \"KAWASAKI\",\r\n    picture: \"https://www.igoa-moto.fr/images/joomlart/features/demo-4.png\",\r\n\r\n    specifications: [\r\n      {\r\n        description: \"Test\",\r\n      },\r\n\r\n      {\r\n        prix: \"1000000\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  console.log(\"AJOUTER\");\r\n\r\n  json.adventuremotorcycles.forEach(readMoto);\r\n\r\n  //MODIFIER\r\n\r\n  for (var i = 0; i < json.adventuremotorcycles.length; i++) {\r\n    if (json.adventuremotorcycles[i].id === 11) {\r\n      json.adventuremotorcycles[i].modele = \"Modèle de la mort\";\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  console.log(\"MODIFIER\");\r\n\r\n  json.adventuremotorcycles.forEach(readMoto);\r\n\r\n  //SUPRESSION\r\n\r\n  for (var j = 0; j < json.adventuremotorcycles.length; j++) {\r\n    if (json.adventuremotorcycles[j].id === 11) {\r\n      json.adventuremotorcycles.splice(j);\r\n\r\n      break;\r\n    }\r\n  }\r\n\r\n  console.log(\"SUPRESSION\");\r\n\r\n  json.adventuremotorcycles.forEach(readMoto);\r\n\r\n  //Le problème avec cette approche est que c'est non persistant. Les sécurités des navigateurs ne permettent pas d'écrire dans un fichier côté client.\r\n}\r\n\r\nexport default DemoJSONLocal;\r\n","import React from \"react\";\nimport logo from \"../logo.svg\";\nimport \"./App.css\";\nimport BoutonInstallPWA from \"./BoutonInstallPWA\";\nimport DemoJSONLocal from \"../localDB/DemoJSONLocal\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoutonInstallPWA />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <DemoJSONLocal />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n//Changer le unregistrer par registrer\n"],"sourceRoot":""}