{"version":3,"sources":["./src/app/page2/page2.component.ts","./src/app/page2/page2.component.html","./src/app/recherche/recherche.component.ts","./src/app/recherche/recherche.component.html","./src/environments/environment.ts","./src/app/carousel/carousel.component.ts","./src/app/carousel/carousel.component.html","./src/app/hero2/hero2.component.ts","./src/app/hero2/hero2.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/hero/hero.component.ts","./src/app/hero/hero.component.html","./src/app/app.module.ts","./src/app/hero.service.ts","./src/app/table-heros/table-heros.component.ts","./src/app/table-heros/table-heros.component.html","./src/app/composant-racine/composant-racine.component.ts","./src/app/composant-racine/composant-racine.component.html","./src/app/pied-page/pied-page.component.ts","./src/app/pied-page/pied-page.component.html","./src/app/dialog-new-hero/dialog-new-hero.component.ts","./src/app/dialog-new-hero/dialog-new-hero.component.html","./src/app/en-tete/en-tete.component.ts","./src/app/en-tete/en-tete.component.html","./src/app/app-routing.module.ts","./src/app/page1/page1.component.ts","./src/app/page1/page1.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n//Importer l'interface hero\nimport {Hero} from '../hero'\n//Importer service\nimport { HeroService } from '../hero.service';\n\n\n@Component({\n  selector: 'app-page2',\n  templateUrl: './page2.component.html',\n  styleUrls: ['./page2.component.css']\n})\nexport class Page2Component implements OnInit {\n //Variable du tableau de héros\n  heros: Hero[];\n\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    //Appelle de la fonction à l'ouverture de la page\n    this.getHeros();\n  }\n  //Fonction qui récupère les données de l'API\n  getHeros(): void {\n    this.heroService.getHeros()\n        .subscribe(resultat => this.heros = resultat);\n  }\n  //Le void définit une fonction sans return en TS\n\n}","<div class=\"main\">\r\n    <h2>Page 2</h2>\r\n    <div class=\"container\">\r\n        <app-en-tete></app-en-tete>\r\n        <div class=\"contenu\">\r\n            <div class=\"sectionGauche\">\r\n                <!-- recherche -->\r\n                <app-recherche></app-recherche>\r\n            </div>\r\n            <div class=\"sectionDroite\">\r\n            <!-- Faire le ngFor sur l'élément bouclé et non le conteneur-->\r\n                <mat-list>\r\n                    <mat-list-item *ngFor=\"let item of heros\">                  \r\n                        {{item.nom}}                                                      \r\n                        <mat-divider></mat-divider>\r\n                    </mat-list-item>\r\n                </mat-list>\r\n            </div>\r\n           \r\n           \r\n            <div>\r\n                <!-- Composant avec le tableau des héros -->\r\n                <app-table-heros></app-table-heros>\r\n            </div>\r\n        </div>\r\n        <app-pied-page></app-pied-page>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-recherche',\n  templateUrl: './recherche.component.html',\n  styleUrls: ['./recherche.component.css']\n})\n\nexport class RechercheComponent implements OnInit {\n    @Input() description : string;\n\n \n  constructor() { }\n opened: boolean;\n  ngOnInit(): void {\n  }\n\n}\n","<p>Je suis la section recherche {{description}}</p>\n<input type=\"text\" [(ngModel)]=\"description\">\n<!--<mat-sidenav-container class=\"example-container\">\n    <mat-sidenav class=\"example-sidenav\" #sidenav mode=\"over\">Formulaire de recherche</mat-sidenav>\n    <mat-sidenav-content class=\"example-content\">\n        Contenu explicatif à gauche et bouton à droite \n        <div class=\"textGauche\">\n            Voici le contenu explicatif\n        </div>\n        <div class=\"textDroite\">\n            <button mat-button (click)=\"sidenav.toggle()\">Chercher</button>\n        </div>\n        </mat-sidenav-content>\n</mat-sidenav-container>-->\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-carousel',\n  templateUrl: './carousel.component.html',\n  styleUrls: ['./carousel.component.css']\n})\nexport class CarouselComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <p>Carousel</p>\n</div>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-hero2',\n  templateUrl: './hero2.component.html',\n  styleUrls: ['./hero2.component.css']\n})\nexport class Hero2Component implements OnInit {\n@Input() nom:string;\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<div>\n    <p>{{nom}}</p>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'exercice-composants-heros';\n}\n","<!-- * * * * * * * * * * * * * * Exercice composants héros* * * * * * * * * * * * * * * * * -->\n\n\n<app-composant-racine></app-composant-racine>\n<router-outlet></router-outlet>","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-hero',\n  templateUrl: './hero.component.html',\n  styleUrls: ['./hero.component.css']\n})\nexport class HeroComponent implements OnInit {\n @Input() nom:string;\n \n  constructor() { }\n  \n  ngOnInit(): void {\n  }\n\n}\n","<div fxLayoutGap=\"100px grid\" fxLayout=\"row wrap\" fxLayout.xs=\"column\" fxLayoutAlign=\"space-around center\" fxLayoutGap=\"25px\">\n    <div fxFlex=\"calc(33%-25px)\" fxFlex.sm=\"calc(50%-25px)\">\n        <mat-card class=\"example-card\" >\n            <mat-card-header>\n                <!-- Ajouter une mention à un héro selon son nom -->\n                <mat-card-title>{{nom}}</mat-card-title>\n                <mat-card-subtitle *ngIf=\"[nom]=='Batman'; else elseBlock\">Le meilleur Héro</mat-card-subtitle>\n                <ng-template #elseBlock><mat-card-subtitle>Héro ordinaire</mat-card-subtitle></ng-template>\n                <!-- Input pour changer le nom du hero -->               \n            </mat-card-header>\n            <mat-form-field class=\"example-half-width\">\n                <!--  Two-way binding -->\n                <input [(ngModel)]='nom' matInput placeholder=\"Nom du héro\" value={{nom}}>\n            </mat-form-field>\n            <img mat-card-image src=\"../../assets/img/superHero.jpg\" alt=\"Photo of a Shiba Inu\">\n            <mat-card-content>\n                <p>\n                    Description\n                </p>\n            </mat-card-content>\n            <mat-card-actions>\n                <button mat-button>LIKE</button>\n                <button mat-button>SHARE</button>\n            </mat-card-actions>\n        </mat-card>\n    </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';//Module pour le service\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { HeroService } from './hero.service';\nimport { AppComponent } from './app.component';\nimport { ComposantRacineComponent } from './composant-racine/composant-racine.component';\nimport { EnTeteComponent } from './en-tete/en-tete.component';\nimport { RechercheComponent } from './recherche/recherche.component';\nimport { CarouselComponent } from './carousel/carousel.component';\nimport { HeroComponent } from './hero/hero.component';\nimport { PiedPageComponent } from './pied-page/pied-page.component';\nimport { Page1Component } from './page1/page1.component';\nimport { Page2Component } from './page2/page2.component';\nimport { Hero2Component } from './hero2/hero2.component';\nimport { TableHerosComponent } from './table-heros/table-heros.component';\nimport { DialogNewHeroComponent } from './dialog-new-hero/dialog-new-hero.component';\n\n\nimport { FormsModule } from '@angular/forms';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatListModule} from '@angular/material/list';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatDialogModule} from '@angular/material/dialog';\n\n\n\n\n\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ComposantRacineComponent,\n    EnTeteComponent,\n    RechercheComponent,\n    CarouselComponent,\n    HeroComponent,\n    PiedPageComponent,\n    Page1Component,\n    Page2Component,\n    Hero2Component,\n    TableHerosComponent,\n    DialogNewHeroComponent,\n   \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatGridListModule,\n    MatCardModule,\n    MatListModule,\n    MatDividerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    MatButtonModule,\n    HttpClientModule,\n    MatTableModule,\n    MatDialogModule\n  ],\n  providers: [HeroService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","//Service pour obtenir les informations des héros par l'entremise d'une API\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Hero } from './hero';\nimport { Observable } from 'rxjs';\n\nconst httpOptions = {\nheaders: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n  //Variable de l'url de l'API\n  heroesUrl = 'https://guarded-mesa-24051.herokuapp.com/api/';\n\n  constructor(private http: HttpClient) { }\n  //Fonction pour appeler l'API, obtenir les données READ\n  getHeros(): Observable<Hero[]> {\n    return this.http.get<Hero[]>(this.heroesUrl + 'heros');  \n  }\n  //Fonction pour appeler l'API, ajouter une donnée CREATE\n  addHero(hero: Hero): Observable<Hero> {\n  return this.http.post<Hero>(this.heroesUrl + 'hero', hero, httpOptions);\n  }\n  /** PUT: mise à jour du héros */\n  updateHero(hero: Hero): Observable<any> {\n    const id = hero._id;\n    return this.http.put<Hero>(this.heroesUrl + 'hero/' + id, hero, httpOptions);\n  }\n  /** DELETE: suppression du héros */\n  deleteHero(id: string): Observable<Hero> {\n    return this.http.delete<Hero>(this.heroesUrl + 'hero/' + id, httpOptions);\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Hero } from '../hero';//Interface\nimport { HeroService } from '../hero.service';//Service\nimport {MatTable} from '@angular/material/table';  // Permet de mettre à jour les données du tableau, pour l'ajout \nimport { NgForm } from '@angular/forms';  // Permet de vérifier si le formulaire est valide\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { DialogNewHeroComponent } from '../dialog-new-hero/dialog-new-hero.component';\n\n@Component({\n  selector: 'app-table-heros',\n  templateUrl: './table-heros.component.html',\n  styleUrls: ['./table-heros.component.css']\n})\nexport class TableHerosComponent implements OnInit {\n  @ViewChild(MatTable) table: MatTable<any>;\n  //Tableau de données\n  heros: Hero[];\n   //Un tableau contenant la liste des éléments à afficher\n  columnsToDisplay = ['nom','actions'];\n  //Variable du nouveau héro, lors de l'ajout\n  newHero: Hero;\n  //Variable de l'élément sélectionné\n  selectedHero: Hero;\n//Créer une variable pour le service\n  constructor(private heroService: HeroService, public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    //Appelle de la fonction à l'ouverture de la page\n    //Obtient les informations de l'API\n    this.getHeros();\n    //Définit l'objet newHero\n    this.newHero = {_id: null, nom:''};\n  }\n  //Fonction qui récupère les données de l'API\n  //Le void définit une fonction sans return en TS\n  getHeros(): void {\n    this.heroService.getHeros()\n        .subscribe(resultat => this.heros = resultat);\n  }\n  //Fonction pour l'ajout d'un héro, 1ere méthode avec bouton\n  onAdd(tableHeros: MatTable<Hero>, heroFormAjout: NgForm) {\n    if(heroFormAjout.valid) {\n      this.heroService.addHero(this.newHero)\n        .subscribe(hero => { this.heros.push(hero); heroFormAjout.resetForm(); tableHeros.renderRows();});\n    }\n  }\n\n  //Fonction pour l'ouverture du dialog, 2e méthode avec le dialogue\n    //Fonction pour l'ajout lors de la fermeture du dialog, en appuyant sur le crochet\n\n  openDialogNewHero(): void {\n    const dialogRef = this.dialog.open(DialogNewHeroComponent, {\n      width: '250px',\n      data: {hero: this.newHero}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      if(result) {\n        this.newHero = result;\n        console.log(this.newHero);\n        this.heroService.addHero(this.newHero)\n            .subscribe(hero  => { this.heros.push(hero); this.newHero._id = null; this.newHero.nom=''; this.table.renderRows()});\n      }\n    });\n    //Prend en charge si on a annulé\n  }\n  //Fonction pour sélectionner l'élément\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n  //Fonction pour modifier l'élément\n  onEdit(heroFormEdition: NgForm): void {\n    if (heroFormEdition.valid) {\n      this.heroService.updateHero(this.selectedHero)\n          .subscribe(() => this.selectedHero = null);\n    }\n   }\n    //Fonction pour supprimer l'élément\n   onDelete(hero: Hero): void {\n    this.heroService.deleteHero(hero._id)\n        .subscribe(result => this.heros = this.heros.filter(h => h !== hero));\n   }\n   \n   \n\n}","<!-- Champ pour ajouter un nouveau superhéros -->\n<div>\n    <h1>Ajout d'un héro avec un dialog</h1>\n    <button matSuffix type=\"submit\" mat-icon-button color=\"primary\" (click)=\"openDialogNewHero()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n\n    <form #heroFormAjout=\"ngForm\" id=\"heroFormAjout\" (ngSubmit)=\"onAdd(tableHeros, heroFormAjout)\">\n        <mat-form-field class=\"input-full-width\">\n            <input type=\"text\" name=\"nom\" required minlength=\"2\" maxlength=\"50\" [(ngModel)]=\"newHero.nom\" matInput\n                #nom=\"ngModel\" placeholder=\"Nouveau héro\">\n            <button matSuffix type=\"submit\" mat-icon-button color=\"primary\" [disabled]=\"!heroFormAjout.form.valid\"><i\n                    class=\"material-icons\">add</i></button>\n            <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('required')\">Le nom est obligatoire.\n            </mat-error>\n            <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('minlength')\">Le nom doit contenir\n                au moins 2 caractères.</mat-error>\n            <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('maxlength')\">Le nom doit contenir\n                au maximum 50 caractères.</mat-error>\n        </mat-form-field>\n    </form>\n</div>\n<h1>Tableau des superhéros</h1>\n<!-- Tableau des héros avec mat-table -->\n<table mat-table #tableHeros [dataSource]=\"heros\"> <!-- Tableau des données dans le dataSource -->\n    <!-- colonne des noms -->\n    <ng-container matColumnDef=\"nom\">\n        <th mat-header-cell *matHeaderCellDef> Nom </th><!-- Titre de la colonne -->\n        <!-- <td mat-cell *matCellDef=\"let hero\"> {{hero.nom}} </td> Valeur associé à la colonne -->\n        <!-- Remplacer par un formulaire pour l'édition à l'endroit ou le nom du héro est affiché -->\n        <td mat-cell *matCellDef=\"let hero\">\n            <!-- Vérifier les valeurs et exécuter la fonction onEdit lors de la soummission -->\n            <form #heroFormEdition=\"ngForm\" id=\"heroFormEdition\" (ngSubmit)=\"heroFormEdition.form.valid && onEdit(heroFormEdition)\">\n                <!-- Condition pour afficher le formulaire le hero sélectionné lors du clic du bouton est le nom du héro de la ligne -->\n                <mat-form-field *ngIf=\"(selectedHero && selectedHero === hero);else editNom;\" class=\"input-full-width\">\n                    <!-- Dans le champ placer le nom du héro sélectionné grâce à un ngModel et associé pour la modification -->\n                    <!-- Les validations sont ajoutées required, longueur -->\n                    <input name=\"selectedHeroNom\" [(ngModel)]=\"selectedHero.nom\" matInput required minlength=\"2\" maxlength=\"50\"\n                        name=\"nomEdition\" #nomEdition=\"ngModel\">\n                        <!-- Affichage lors d'erreur de validation -->\n                    <mat-error *ngIf=\"nomEdition.invalid && (nomEdition.dirty || nomEdition.touched) && nomEdition.hasError('required')\">\n                        Le nom est obligatoire.</mat-error>\n                    <mat-error *ngIf=\"nomEdition.invalid && (nomEdition.dirty || nomEdition.touched) && nomEdition.hasError('minlength')\">\n                        Le nom doit contenir au moins 2 caractères.</mat-error>\n                    <mat-error *ngIf=\"nomEdition.invalid && (nomEdition.dirty || nomEdition.touched) && nomEdition.hasError('maxlength')\">\n                        Le nom doit contenir au maximum 50 caractères.</mat-error>\n                </mat-form-field>\n            </form>\n            <!-- Si la condition du formulaire n'est pas rempli afficher seulement le nom du héro -->\n            <ng-template #editNom><span (click)=\"onSelect(hero)\">{{hero.nom}}</span></ng-template>\n        </td>\n    </ng-container>\n    <!-- colonne des actions -->\n    <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell *matCellDef=\"let hero\" class=\"boutonsAction\">\n            <!-- Condition si le hero sélectionné est le hero sur cette ligne pour l'édition-->\n            <button *ngIf=\"(selectedHero && selectedHero === hero);else editButton;\" color=\"primary\" form=\"heroFormEdition\"\n                mat-button><i class=\"material-icons\">done</i></button>\n            <ng-template #editButton>\n                <form (ngSubmit)=\"onSelect(hero)\">\n                    <button mat-button><i class=\"material-icons\">edit</i></button>\n                </form>\n            </ng-template>\n            <form (ngSubmit)=\"onDelete(hero)\">\n                <button mat-button><i class=\"material-icons\">delete</i></button>\n            </form>\n        </td>\n    </ng-container>  \n    \n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n    <tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-composant-racine',\n  templateUrl: './composant-racine.component.html',\n  styleUrls: ['./composant-racine.component.css']\n})\nexport class ComposantRacineComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <h2>Composant racine</h2>\n    <app-page1></app-page1>\n    <app-page2></app-page2>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pied-page',\n  templateUrl: './pied-page.component.html',\n  styleUrls: ['./pied-page.component.css']\n})\nexport class PiedPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <h3>Pied de page</h3>\n</div>","import { Component, OnInit, Inject } from '@angular/core';\nimport { Hero } from '../hero';//Interface\n import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n\n@Component({\n  selector: 'app-dialog-new-hero',\n  templateUrl: './dialog-new-hero.component.html',\n  styleUrls: ['./dialog-new-hero.component.css']\n})\nexport class DialogNewHeroComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogNewHeroComponent>,\n    //Rend accessible la valeur du nouveau héro\n    @Inject(MAT_DIALOG_DATA) public newHero: Hero) {\n     }\n    //Fonction pour annuler l'ajout, le dialog ferme\n    onAnnulerClick(): void {\n      this.dialogRef.close();\n    }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form #heroFormAjout=\"ngForm\" id=\"heroFormAjout\">\n    <mat-form-field class=\"input-full-width\">\n        <input type=\"text\" name=\"nom\" required minlength=\"2\" maxlength=\"50\" [(ngModel)]=\"newHero.nom\" matInput\n            #nom=\"ngModel\" placeholder=\"Nouveau héro\">\n        <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('required')\">Le nom est obligatoire.\n        </mat-error>\n        <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('minlength')\">Le nom doit contenir\n            au moins 2 caractères.</mat-error>\n        <mat-error *ngIf=\"nom.invalid && (nom.dirty || nom.touched) && nom.hasError('maxlength')\">Le nom doit contenir\n            au maximum 50 caractères.</mat-error>\n    </mat-form-field>\n    <div mat-dialog-actions>\n        <button mat-button (click)=\"onAnnulerClick()\">Anuler</button>\n        <button mat-button [mat-dialog-close]=\"newHero\" cdkFocusInitial>Ok</button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-en-tete',\n  templateUrl: './en-tete.component.html',\n  styleUrls: ['./en-tete.component.css']\n})\nexport class EnTeteComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>    \n    <mat-toolbar>\n        <!-- ****Dans un span déclarer la class de material-icons et dans les balise inscrire le nom de l'icône -->\n        <!-- https://material.io/resources/icons/?icon=stars&style=baseline -->\n        <mat-icon>\n                stars\n        </mat-icon>\n        <h3>Héros et cie</h3>\n        <span class=\"example-spacer\"></span>\n        <span class=\"material-icons\">\n            stars\n        </span>\n    </mat-toolbar>    \n   \n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n//Importer l'interface hero\nimport {Hero} from '../hero';\n//importer le tableau-mock de trois héros\n//import {tableauHeros} from '../mock-heros';\n//Importation pour utiliser le service API\nimport { HeroService } from '../hero.service';\n\n@Component({\n  selector: 'app-page1',\n  templateUrl: './page1.component.html',\n  styleUrls: ['./page1.component.css']\n})\nexport class Page1Component implements OnInit {\n  //Avec l'utilisation du service la variable est initialisé en tableau vide.\n  heros: Hero[];\n  \n  \n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    //Appelle de la fonction à l'ouverture de la page\n    this.getHeros();\n  }\n  //Fonction qui récupère les données de l'API\n  getHeros(): void {\n    this.heroService.getHeros()\n        .subscribe(resultat => this.heros = resultat);\n  }\n  //Le void définit une fonction sans return en TS\n\n}\n","<div class=\"main\">\n    <h2>Page 1</h2>\n    \n    <div class=\"container\">\n        <app-en-tete></app-en-tete>      \n            <mat-drawer-container>\n                <mat-drawer #sidenav mode=\"over\">\n                    <!-- recherche -->\n                    <app-recherche></app-recherche>                    \n                </mat-drawer>\n               \n                <mat-drawer-content> \n                    <!-- caroussel et hero  -->\n                    <mat-grid-list class=\"list\" cols=\"4\" rowHeight=\"34rem\">\n                        <mat-grid-tile class=\"boutonsidenav\">\n                            <button mat-button (click)=\"sidenav.toggle()\">Rechercher un héro <i class=\"material-icons\">double_arrow</i></button>\n                        </mat-grid-tile>\n                        <mat-grid-tile colspan=\"3\">\n                            <app-carousel class=\"sectionCaroussel\"></app-carousel>\n                        </mat-grid-tile>  \n                        <mat-grid-tile></mat-grid-tile>  \n                        <mat-grid-tile  *ngFor=\"let item of heros\">\n                            <app-hero class=\"sectionHero\" [nom]=item.nom></app-hero>\n                        </mat-grid-tile>\n                    </mat-grid-list> \n                </mat-drawer-content>\n            </mat-drawer-container>     \n        <app-pied-page></app-pied-page>\n    </div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}