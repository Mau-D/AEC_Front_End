{"version":3,"sources":["img/banniere.jpg","img/photo.jpg","constantes.js","components/Accueil.js","components/OnePager.js","components/Header.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","IMAGES","banniere","require","photo","Accueil","location","useLocation","Container","fluid","className","Row","id","Col","xs","span","offset","pathname","to","Image","src","OnePager","Header","Footer","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,iGCC9BC,G,MAAS,CACpBC,SAAUC,EAAQ,IAClBC,MAAOD,EAAQ,M,qDCmEFE,MA7Df,WACE,IAAIC,EAAWC,cACf,OACE,oCACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,OAGzB,kBAACC,EAAA,EAAD,CAAKC,GAAG,YAEN,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACN,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KAEE,kBAACE,EAAA,EAAD,CACEC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GACvBN,UAAU,mCAFZ,mCAI+B,6BAJ/B,wCAQA,kBAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKN,UAAU,YACzC,uBAAGA,UAAU,wBACX,0BAAMA,UAAU,QAAhB,iCADF,oTAUmB,cAAtBJ,EAASW,UACR,kBAACN,EAAA,EAAD,CAAKD,UAAU,QAEb,kBAACG,EAAA,EAAD,CAAKH,UAAU,cAAf,8EAIA,kBAACG,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,kBAAC,IAAD,CAAME,GAAI,YACR,6CAQZ,kBAACL,EAAA,EAAD,CAAKC,GAAI,EAAGJ,UAAU,YACpB,yBAAKA,UAAU,YACb,yCACA,kBAACS,EAAA,EAAD,CAAOV,OAAK,EAACW,IAAKnB,EAAOG,MAAOQ,GAAG,mBClDlCS,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCMSC,MAVf,WACE,OACE,oCACE,yBAAKZ,UAAU,cACb,wCCIOa,MARf,WACE,OACE,oCACE,uCCwBSC,MArBf,WACE,IAAIlB,EAAWC,cAEf,OACE,oCAEE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,OACF,cAAtBJ,EAASW,UAA4B,kBAAC,EAAD,MACtC,kBAACT,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,OAAK,EAACC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,WAAWC,OAAK,EAACC,UAAWN,MAGrB,cAAtBf,EAASW,UAA4B,kBAAC,EAAD,SCX1BW,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b43fc1a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banniere.405bb743.jpg\";","module.exports = __webpack_public_path__ + \"static/media/photo.30e9828a.jpg\";","//Variables pour téléverser les photos du projet\r\nexport const IMAGES = {\r\n  banniere: require(\"./img/banniere.jpg\"),\r\n  photo: require(\"./img/photo.jpg\"),\r\n};\r\n","import React from \"react\";\r\n//import APropos from \"./APropos\";\r\n//import Contact from \"./Contact\";\r\nimport { IMAGES } from \"../constantes\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { Container, Row, Col, Image } from \"react-bootstrap\";\r\n\r\nimport \"../styles/principal.sass\";\r\n\r\nfunction Accueil() {\r\n  let location = useLocation(); /*variable de la page où je me trouve */\r\n  return (\r\n    <>\r\n      <Container fluid className=\"p-0\">\r\n        {/*Ensemble de la page d'accueil */}\r\n\r\n        <Row id=\"banniere\">\r\n          {/*Texte de présentation*/}\r\n          <Col xs={8}>\r\n            <Container>\r\n              <Row>\r\n                {/*Titre*/}\r\n                <Col\r\n                  xs={{ span: 8, offset: 2 }}\r\n                  className=\"text-center mt-5 p-5 text-light\"\r\n                >\r\n                  Bonjour, Je me présente Maud <br></br> Développeur Web\r\n                  Front-End Junior\r\n                </Col>\r\n                {/*Texte*/}\r\n                <Col xs={{ span: 8, offset: 2 }} className=\"mt-5 p-5\">\r\n                  <p className=\"text-left text-light\">\r\n                    <span className=\"pl-5\">Présentement étudiante,</span> je\r\n                    suis à la recherche d'un stage ou d'un emploi stimulant. Ce\r\n                    changement de carrière fait suite à ma passion des\r\n                    technologies et mon désir d'apprendre constant. J'adore la\r\n                    résolution de problème et je suis attirée vers ce nouveau\r\n                    style de vie combinant création et techniques.\r\n                  </p>\r\n                </Col>\r\n              </Row>\r\n              {location.pathname !== \"/onepage/\" && (\r\n                <Row className=\"mt-5\">\r\n                  {/*Lien vers la version une seule page*/}\r\n                  <Col className=\"text-light\">\r\n                    Vous préférez \"scroller\", allez directement à la version\r\n                    OnePage.\r\n                  </Col>\r\n                  <Col xs={{ span: 4, offset: 1 }}>\r\n                    <Link to={\"onepage/\"}>\r\n                      <h2>One Page</h2>\r\n                    </Link>\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n            </Container>\r\n          </Col>\r\n          {/*Photo*/}\r\n          <Col xs={3} className=\"p-5 mt-5\">\r\n            <div className=\"polaroid\">\r\n              <p>C'est moi!</p>\r\n              <Image fluid src={IMAGES.photo} id=\"photoMoi\" />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport Accueil from \"./Accueil\";\r\n\r\nfunction OnePager() {\r\n  return (\r\n    <>\r\n      <Accueil />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OnePager;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <>\r\n      <div className=\"hautDePage\">\r\n        <p>Header</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <>\r\n      <p>Footer</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Accueil from \"./Accueil\";\nimport OnePager from \"./OnePager\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport { Container } from \"react-bootstrap\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\n\nfunction App() {\n  let location = useLocation(); /*variable de la page où je me trouve */\n\n  return (\n    <>\n      {/*Contenu de l'app*/}\n      <Container fluid className=\"p-0\">\n        {location.pathname !== \"/onepage/\" && <Header />}\n        <Container fluid>\n          <Switch>\n            {/*Accueil est la première page*/}\n            <Route path=\"/\" exact component={Accueil} />\n            <Route path=\"/onepage\" exact component={OnePager} />\n          </Switch>\n        </Container>\n        {location.pathname !== \"/onepage/\" && <Footer />}\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}